<?php
/**
 * This HTML controller is what generates HTML pages (as opposed to JSON responses
 * generated by the other controllers).  The reason is testability: most of the 
 * manager app can be tested by $scriptProperties in, JSON out.  The HTML pages
 * generated by this controller end up being static HTML pages (well... ideally, 
 * anyway). 
 *
 * See http://stackoverflow.com/questions/10941249/separate-rest-json-api-server-and-client
 *
 * See the IndexManagerController class (index.class.php) for routing info.
 *
 * @package assman
 */
namespace Assman;
class PageController extends BaseController {

    public $loadHeader = false;
    public $loadFooter = false;
    // GFD... this can't be set at runtime. See improvised addStandardLayout() function
    public $loadBaseJavascript = false; 
    // Stuff needed for interfacing with Assman API (mapi)
    public $client_config = array();
    
    function __construct(\modX &$modx,$config = array()) {
        parent::__construct($modx,$config);
        static::$x =& $modx;
        
        $this->config['assets_url'] = $modx->getOption('assman.assets_url', null, MODX_CORE_PATH.'components/assman/');
        
        // Set up any config data needed by the HTML client
        $this->client_config = array(
            'controller_url' => $this->config['controller_url']
        );
//        $this->modx->regClientCSS($this->config['assets_url'].'css/mgr.css');
//        $this->modx->regClientCSS('//code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css');
//        $this->modx->regClientStartupScript($this->config['assets_url'].'js/jquery.min.js');
//        $this->modx->regClientStartupScript($this->config['assets_url'].'js/jquery-ui.js'); 
        
        
        
        $this->modx->regClientCSS($this->config['assets_url'] . 'css/mgr.css');
        $this->modx->regClientCSS($this->config['assets_url'] . 'css/dropzone.css');
//        $this->modx->regClientCSS($this->config['assets_url'].'css/datepicker.css');
        $this->modx->regClientCSS('//code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/jquery.min.js');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/jquery-ui.js');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/app.js');
//        $this->modx->regClientStartupScript($this->config['assets_url'].'js/jquery.tabify.js');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/dropzone.js');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/bootstrap.js');
        $this->modx->regClientStartupScript($this->config['assets_url'].'js/multisortable.js');        
    }


    

    
    //------------------------------------------------------------------------------
    //! Assets
    //------------------------------------------------------------------------------
    /**
     * Asset management main page
     *
     * @param array $scriptProperties
     */
    public function getAssets(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        $Obj = new Asset($this->modx);
        $results = $Obj->all($scriptProperties);
        $this->setPlaceholder('results', $results);
        $this->setPlaceholders($scriptProperties);
        return $this->fetchTemplate('main/assets.php');
    }

    public function postAssets(array $scriptProperties = array()) {
        return $this->getAssets($scriptProperties);
    }
 
     public function getAssetCreate(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        $Obj = new Asset($this->modx);
        $results = $Obj->all($scriptProperties);
        $this->setPlaceholder('results', $results);
        $this->setPlaceholders($scriptProperties);
        return $this->fetchTemplate('asset/create.php');
    }    

    public function getAssetEdit(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        $asset_id = (int) $this->modx->getOption('asset_id',$scriptProperties);
        $Obj = new Asset($this->modx);    
        if (!$result = $Obj->find($asset_id)) {
            return $this->sendError('Page not found.');
        }
        $this->setPlaceholders($scriptProperties);
        $this->setPlaceholders($result->toArray());
        $this->setPlaceholder('result',$result);
        return $this->fetchTemplate('asset/edit.php');
    }

    
    /**
     * 
     * @param array $scriptProperties
     */
    public function getIndex(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        return $this->fetchTemplate('main/index.php');
    }

    
    //------------------------------------------------------------------------------
    //! Settings
    //------------------------------------------------------------------------------
    /**
     * @param array $scriptProperties
     */
    public function getSettings(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        return $this->fetchTemplate('main/settings.php');
     
    }

    public function getTest(array $scriptProperties = array()) {
        return 'Test...';
    }
    
    //------------------------------------------------------------------------------
    //! Page
    //------------------------------------------------------------------------------
    /**
     * Called from the Store CRC: controllers/store/update.class.php and create.class.php 
     *
     * @param array $scriptProperties
     */
    public function getPageAssets(array $scriptProperties = array()) {
        $this->modx->log(\modX::LOG_LEVEL_INFO, print_r($scriptProperties,true),'','Asset Manager PageController:'.__FUNCTION__);
        $page_id = (int) $this->modx->getOption('page_id', $scriptProperties);
        $this->client_config['page_id'] = $page_id;
        $this->setPlaceholder('page_id', $page_id);
        $this->scriptProperties['_nolayout'] = true;

        $c = $this->modx->newQuery('PageAsset');
        $c->where(array('PageAsset.product_id' => $product_id));
        $c->sortby('PageAsset.seq','ASC');
        $PA = $this->modx->getCollectionGraph('PageAsset','{"Asset":{}}',$c);
        $this->setPlaceholder('page_assets',$PA);

/*
        $results = $Obj->all($scriptProperties);
        $count = $Obj->count($scriptProperties);
        $offset = (int) $this->modx->getOption('offset',$scriptProperties,0);
        $results_per_page = (int) $this->modx->getOption('assman.default_per_page','',$this->modx->getOption('default_per_page'));
        $this->_setProductColumns();
        $this->setPlaceholder('baseurl', $this->page('storeproducts'));
        $this->setPlaceholder('results', $results);
        $this->setPlaceholder('count', $count);
        $this->setPlaceholder('offset', $offset);
        $this->setPlaceholder('results_per_page', $results_per_page);        
*/
        $this->setPlaceholders($scriptProperties);
        return $this->fetchTemplate('main/pageassets.php');
    }            
}
/*EOF*/